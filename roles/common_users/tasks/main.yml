---
- name: create upper directories for homedirs
  file:
    path: "{{ item.value.home |dirname }}"
    state: directory
    owner: root
    group: root
    mode:  0755
  when: item.value.home is defined
  with_dict: "{{ common_users__list }}"

# if we try to set password with 'user' module we get error 'usermod: user root is currently used by process 1'
- name: "set up root's password"
  replace:
    path: /etc/shadow
    regexp: "^(root:)[^:]*(:.*)$"
    replace: "\\1{{ common_users__list.root.password }}\\2"
    backup: yes
  when:
    - common_users__list.root is defined
    - not (common_users__list.root.password |is_empty_or_undefined)

- name: converge user {{ item.key }} with a default home
  user:
    name:     "{{ item.key }}"
    skeleton: "{{ item.value.skeleton |default('no') }}"
    system:   "{{ item.value.system |default('no') }}"
    password: "{{ item.value.password |default('*') }}"
    shell:    "{{ item.value.shell |default(common_users__shell) }}"
  with_dict: "{{ common_users__list }}"
  when: (item.value.home is not defined) and (item.key != 'root')

- name: create custom homes
  file:
    state: directory
    path:  "{{ item.value.home }}"
    owner: "{{ item.key }}"
  with_dict: "{{ common_users__list }}"
  when: (item.value.home is defined) and (item.key != 'root')

- name: converge user {{ item.key }} with a defined home
  user:
    name:     "{{ item.key }}"
    home:     "{{ item.value.home }}"
    skeleton: "{{ item.value.skeleton |default('no') }}"
    system:   "{{ item.value.system |default('no') }}"
    password: "{{ item.value.password |default('*') }}"
    shell:    "{{ item.value.shell |default(common_users__shell) }}"
  with_dict: "{{ common_users__list }}"
  when: (item.value.home is defined) and (item.key != 'root')

- include_tasks: user_ssh_keys.yml
  vars:
    common_users__v_user: "{{ item.key }}"
    common_users__v_ssh_keys: "{{ item.value.authorized_keys }}"
  when: item.value.authorized_keys is defined
  with_dict: "{{ common_users__list }}"

- name: converge sudo lines for for {{ item.key }}
  template:
    src:    sudoers_user.j2
    dest:   "/etc/sudoers.d/{{ item.key }}"
    backup: yes
    mode:   0440
    owner:  root
    group:  root
    validate: visudo -cf %s
  when: item.value.sudo_lines is defined
  with_dict: "{{ common_users__list }}"
